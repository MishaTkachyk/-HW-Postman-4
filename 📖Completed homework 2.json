{
	"info": {
		"_postman_id": "52ee4a95-c91f-4e9b-b9c9-404cd37f0b0c",
		"name": "hm_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//http://162.55.220.72:5005/first \r",
							"//1. Отправить запрос.\r",
							"//2. Статус код 200 \r",
							"pm.test(\"Status code is 200\", function () {\r",
							"pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//http://162.55.220.72:5005/user_info_3\r",
							"//1. Отправить запрос.+ Post\r",
							"//2. Статус код 200 \r",
							"//3. Спарсить response body в json.\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"//7. Спарсить request.\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const jsonResponse = pm.response.json();\r",
							"\r",
							"var name =\"Misha\";\r",
							"var age = \"21\";\r",
							"var salary = 1000;\r",
							"var res = pm.response.json();\r",
							"var req = pm.request.body.formdata.toJSON();\r",
							"\r",
							"pm.test(\"Check real name\", function() {\r",
							"pm.expect(res.name).to.eql(\"Lena\");\r",
							"}); \r",
							"pm.test(\"Check real age\", function() {\r",
							"pm.expect(res.age).to.eql(\"21\");\r",
							"}); \r",
							"pm.test(\"Check real salary\", function() {\r",
							"pm.expect(res.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"const reqData = new Map()\r",
							"    pm.request.body.toJSON().formdata.forEach( (el) => {\r",
							"        reqData.set(el.key, el.value);\r",
							"        console.log(el.key + \" \" + el.value)\r",
							"    })\r",
							"    \r",
							"console.log(reqData);\r",
							"\r",
							"pm.test(\"Person is Misha\", () => {\r",
							"pm.expect(+jsonResponse.name).to.eql(+reqData.get(\"name\"))\r",
							"});\r",
							"\r",
							"pm.test(\"Person is 21\", () => {\r",
							"pm.expect(+jsonResponse.name).to.eql(+reqData.get(age))\r",
							"});\r",
							"\r",
							"pm.test(\"Person is 1000\", () => {\r",
							"pm.expect(+jsonResponse.salary).to.eql(+reqData.get(\"salary\"))\r",
							"});\r",
							"\r",
							"console.log(JSON.stringify(jsonResponse.family));\r",
							"\r",
							"pm.test(\"Check u_salary\", function () { \r",
							"pm.expect(pm.response.json().family.u_salary_1_5_year).to.eql(res.salary*4);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Misha",
							"type": "text"
						},
						{
							"key": "age",
							"value": "21",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "url",
							"value": "{{url}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//http://162.55.220.72:5005/object_info_3\r",
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"//3. Спарсить response body в json.\r",
							"//4. Спарсить request.\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const jsonResponse = pm.response.json();\r",
							"\r",
							"const reqData = new Map();\r",
							"pm.request.url.query.map((el) => {\r",
							"    reqData.set(el.key, el.value);\r",
							"    console.log(el.key + \" \" + el.value)\r",
							"})\r",
							"\r",
							"console.log(reqData);\r",
							"\r",
							"pm.test(\"что name в ответе равно name s request (name забрать из request\", function () {\r",
							"    pm.expect(jsonResponse.name).to.eql(reqData.get(\"name\"));\r",
							"})\r",
							"\r",
							"pm.test(\"что age в ответе равно age s request (age забрать из request\", function () {\r",
							"    pm.expect(jsonResponse.age).to.eql(reqData.get(\"age\"));\r",
							"})\r",
							"\r",
							"pm.test(\"что salary в ответе равно salary s request (salary забрать из request\", function () {\r",
							"    pm.expect(+jsonResponse.salary).to.eql(+reqData.get(\"salary\"));\r",
							"})\r",
							"\r",
							"console.log(JSON.stringify(jsonResponse.family));\r",
							"\r",
							"pm.test(\"что у параметра dog есть параметры name.\", function () {\r",
							"pm.expect(jsonResponse.family.pets.dog).haveOwnProperty(\"name\");\r",
							"})\r",
							"\r",
							"pm.test(\"что у параметра dog есть параметры age\", function () {\r",
							"pm.expect(jsonResponse.family.pets.dog).haveOwnProperty(\"age\");\r",
							"})\r",
							"\r",
							"pm.test(\"что параметр name имеет значение Luky\", function () {\r",
							"pm.expect(jsonResponse.family.pets.dog.name).to.eql(\"Luky\");\r",
							"})\r",
							"\r",
							"pm.test(\"что параметр age имеет значение 4\", function () {\r",
							"pm.expect(jsonResponse.family.pets.dog.age).to.eql(4);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//http://162.55.220.72:5005/object_info_4\r",
							"//1. Отправить запрос.+\r",
							"//2. Статус код 200\r",
							"//3. Спарсить response body в json.\r",
							"//4. Спарсить request.\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"//15. Создать в окружении переменную name\r",
							"//16. Создать в окружении переменную age\r",
							"//17. Создать в окружении переменную salary\r",
							"//18. Передать в окружение переменную name\r",
							"//19. Передать в окружение переменную age\r",
							"//20. Передать в окружение переменную salary\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const jsonResponse = pm.response.json();\r",
							"\r",
							"const reqData = new Map();\r",
							"pm.request.url.query.map((el) => {\r",
							"    reqData.set(el.key, el.value);\r",
							"})\r",
							"console.log(reqData);\r",
							"\r",
							"pm.expect(jsonResponse.name).to.eql(reqData.get(\"name\"));\r",
							"\r",
							"pm.expect(jsonResponse.age).to.eql(+reqData.get(\"age\"));\r",
							"\r",
							"console.log(reqData.get(\"salary\"));\r",
							"console.log(jsonResponse.salary);\r",
							"console.log(jsonResponse.salary[0]);\r",
							"console.log(jsonResponse.salary[1]);\r",
							"console.log(jsonResponse.salary[2]);\r",
							"\r",
							"\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(jsonResponse.salary[0]).to.eqls(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Check salary*2\", function () {\r",
							"    pm.expect(jsonResponse.salary[1]).to.eqls(\"2000\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check salary*3\", function () {\r",
							"    pm.expect(jsonResponse.salary[2]).to.eqls(\"3000\");\r",
							"});\r",
							"\r",
							"pm.test(\"Передать в окружение переменную name\", function () {\r",
							"    pm.collectionVariables.set(\"name\", reqData.get(\"name\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Передать в окружение переменную age\", function () {\r",
							"    pm.collectionVariables.set(\"age\", reqData.get(\"age\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Передать в окружение переменную salary\", function () {\r",
							"    pm.collectionVariables.set(\"salary\", reqData.get(\"salary\"));\r",
							"});\r",
							"\r",
							"jsonResponse.salary.forEach(item => console.log(item));\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//http://162.55.220.72:5005/user_info_2\r",
							"//1. Вставить параметр salary из окружения в request\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//3. Вставить параметр name из окружения в name\r",
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"//6. Спарсить response body в json.\r",
							"//7. Спарсить request.\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"        });\r",
							"const responseData = pm.response.json();\r",
							"\r",
							"const reqData = new Map()\r",
							"    pm.request.body.toJSON().formdata.forEach( (el) => {\r",
							"        reqData.set(el.key, el.value);\r",
							"    })\r",
							"\r",
							"    pm.test(\"json response has params start_qa_salary\", function () {\r",
							"    pm.expect(responseData).has.haveOwnProperty(\"start_qa_salary\");\r",
							" })\r",
							"    pm.test(\"json response has params qa_salary_after_6_months\", function () {\r",
							"    pm.expect(responseData).has.haveOwnProperty(\"qa_salary_after_6_months\");\r",
							" })\r",
							"    pm.test(\"json response has params qa_salary_after_12_months\", function () {\r",
							"    pm.expect(responseData).has.haveOwnProperty(\"qa_salary_after_12_months\");\r",
							" })\r",
							"    pm.test(\"json response has params qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(responseData).has.haveOwnProperty(\"qa_salary_after_1.5_year\");\r",
							" })\r",
							"    pm.test(\"json response has params qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(responseData).has.haveOwnProperty(\"qa_salary_after_3.5_years\");\r",
							"  })\r",
							"\r",
							"pm.test(\"json response has params person\", function () {\r",
							"pm.expect(responseData).has.haveOwnProperty(\"person\");\r",
							"})\r",
							"pm.test(\"Check that start_qa_salary = salary from request \", function () {\r",
							"pm.expect(responseData.start_qa_salary).to.eql(+reqData.get(\"salary\"));\r",
							"})\r",
							"pm.test(\"Check that start_qa_salary = salary from request \", function () {\r",
							"pm.expect(responseData.qa_salary_after_6_months).to.eql(reqData.get(\"salary\") * 2);\r",
							"})\r",
							"pm.test(\"Check that salary_after_12_months = salary from request \", function () {\r",
							"pm.expect(responseData.qa_salary_after_12_months).to.eql(+reqData.get(\"salary\") * 2.7);\r",
							"})\r",
							"pm.test(\"Check that qa_salary_after_1.5_year = salary from request \", function () {\r",
							"pm.expect(responseData[\"qa_salary_after_1.5_year\"]).to.eql(+reqData.get(\"salary\") * 3.3);\r",
							"})\r",
							"pm.test(\"Check that qa_salary_after_3.5_years = salary from request \", function () {\r",
							"pm.expect(responseData[\"qa_salary_after_3.5_years\"]).to.eql(+reqData.get(\"salary\") * 3.8);\r",
							"})\r",
							"pm.test(\"в параметре person, 1-й элемент из u_name равен salary из requester\", function () {\r",
							"pm.expect(responseData.person.u_name[1]).to.eql(+reqData.get(\"salary\"));\r",
							"})\r",
							"pm.test(\"что параметр u_age равен age из request (age забрать из request.)\", function () {\r",
							"pm.expect(responseData.person.u_age).to.eql(+reqData.get(\"age\"));\r",
							"})\r",
							"pm.test (\"параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)\", function () {\r",
							"pm.expect(responseData.person.u_salary_5_years).to.eql(reqData.get(\"salary\") * 4.2);\r",
							"})\r",
							"\r",
							" for (item in responseData.person) {\r",
							"        console.log(item + \" :\" +  responseData.person[item]);\r",
							"    }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "age",
			"value": ""
		},
		{
			"key": "salary",
			"value": ""
		}
	]
}